from data import *
import telebot, os, pickle
from telebot import types
from tinydb import TinyDB, Query

db=TinyDB('./database/db.json')



predlojka_bot = telebot.TeleBot(TOKEN)
print("predlojka.py in –ü—Ä–µ–¥–ª–æ–∂–∫–∞ –ò–º–ø–µ—Ä–∏–∏ succesfully started")
q=types.ReplyKeyboardRemove()



def none_type(object):                                      # —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –Ω–∞ "–Ω–æ–Ω" —Ç–∏–ø
	return "" if object==None else f'{object}'


#-------------------------------------------------------------------------------------------------------------------------------------------------------
# bank.py




def edit_currency_info(message, a, b):                  # –∏–∑–º–µ–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π –∏ –±–∞—Ç–æ–≤

	currency_info=[]

	currency_info.append(a)
	currency_info.append(b)
	
	with open("currency_info.pickle", "wb") as file:
		pickle.dump(currency_info, file)
	
	predlojka_bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã")


def view_currency_info():

	with open("currency_info.pickle", "rb") as file:
		currency_info = pickle.load(file)
	

	exchange_rate = currency_info[0] / currency_info[1]
    
    
	return (f"{exchange_rate} –ò–º–ø–µ—Ä—Å–∫–∏—Ö –±–∞—Ç–æ–≤ —Ä–∞–≤–Ω—è—é—Ç—Å—è 1 —Ä—É–±–ª—é") # X bats equals 1 ruble



def get_money(message, amount):
	try:
		to_user_id=int(message.text)

		if db.contains(Query().id == to_user_id):

			new_balance=(db.get(Query().id == to_user_id)['balance']+amount)
			new_sender_balance=db.get(Query().id == message.from_user.id)['balance']-amount

			total_amount=new_balance - (new_balance*commission)

			db.update({"balance": new_balance}, Query().id == to_user_id)
			db.update({"balance": new_sender_balance}, Query().id == message.from_user.id)

			predlojka_bot.reply_to(message, "–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–≤–µ—Ä—à—ë–Ω!")


			predlojka_bot.send_message(to_user_id, "–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å: /bank")

		else:
			predlojka_bot.reply_to(message, "–£ —ç—Ç–æ–≥–æ id –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
			  
	except:
		predlojka_bot.reply_to(message, "–≠—Ç–æ –Ω–µ id, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")




def send_money(message):
	
	try:
		amount=int(message.text)
		sender_balance=db.get(Query().id == message.from_user.id)['balance']
		

		if sender_balance >= amount:
			predlojka_bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
			predlojka_bot.register_next_step_handler(message, get_money, amount)
		

		elif sender_balance < amount:
			predlojka_bot.reply_to(message, "–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


		else:
			predlojka_bot.reply_to(message, "error")


	except:
		predlojka_bot.reply_to(message, "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")




def bank_get_balance(message):
	return db.get(Query().id == message.from_user.id)['balance']


#-------------------------------------------------------------------------------------------------------------------------------------------------------


@predlojka_bot.message_handler(commands=['start'])
def start(message):

	if db.contains(Query().id == message.from_user.id):
		predlojka_bot.reply_to(message, text="–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –ü—Ä–µ–¥–ª–æ–∂–∫—É! –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç–æ–≤)")

	else:
		db.insert({'id': message.from_user.id, 'name': f'{message.from_user.first_name}', 'last_name': f'{message.from_user.last_name}', 'balance': 0})
		predlojka_bot.reply_to(message, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–º–ø–µ—Ä–∏—é!")








@predlojka_bot.message_handler(commands=['edit_currency'])               #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def editing_currency(message):
	if message.chat.id == admin:
		predlojka_bot.reply_to(message, "–°–∫–∏–Ω—å —Ü–∏—Ñ–µ—Ä–∫–∏, –±–∞—Ç—ã –∏ —Ä—É–±–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
		predlojka_bot.register_next_step_handler(message, editing_currency2)
	else:
		predlojka_bot.reply_to(message, "–≠–∫–æ–Ω–æ–º–∏–∫—É –Ω–µ –ª–æ–º–∞–π")







def editing_currency2(message): # —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ—Å—Ä–µ–¥–Ω–∏–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–∏—Ñ–µ—Ä–∫–∏
	try:
		purumpurum=message.text.split(",")

		a=int(purumpurum[0])

		b=int(purumpurum[1])

		edit_currency_info(message, a, b)
	except:
		predlojka_bot.reply_to(message, "–ù–µ –≤—ã—à–ª–æ")







@predlojka_bot.message_handler(commands=['bank'])           # –∫–æ–º–∞–Ω–¥–∞ "–≤—Ö–æ–¥–∞" –≤ –±–∞–Ω–∫
def bank_meetings(message):    
    reply_button=types.ReplyKeyboardMarkup(row_width=2)
    btn1=types.KeyboardButton("üí∞–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
    btn2=types.KeyboardButton("üîÅ–ü–µ—Ä–µ–≤–æ–¥")
    btn3=types.KeyboardButton("üìà–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã")
    btn4=types.KeyboardButton("‚ùî–ü–æ–º–æ—â—å")

    reply_button.add(btn1, btn2, btn3, btn4)

    predlojka_bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–º–ø–µ—Ä—Å–∫–∏–π –±–∞–Ω–∫! –ß—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_button)

    
    predlojka_bot.register_next_step_handler(message, what_do_you_want_from_bank)








def what_do_you_want_from_bank(message):        # –∫–æ–º–∞–Ω–¥–∞, –æ–∂–∏–∂–∞—é—â–∞—è callback from user

	
	if message.text == "üí∞–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å":
		predlojka_bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bank_get_balance(message)} –ò–º–ø–µ—Ä—Å–∫–∏—Ö –ë–∞—Ç–æ–≤\n–í–∞—à id: `{message.from_user.id}`", reply_markup=q, parse_mode='MarkdownV2')


	elif message.text == "üîÅ–ü–µ—Ä–µ–≤–æ–¥":
		predlojka_bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞!", reply_markup=q)
		predlojka_bot.register_next_step_handler(message, send_money)


	elif message.text == "üìà–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã":
		predlojka_bot.reply_to(message, f"{view_currency_info()}", reply_markup=q)


	elif message.text == "‚ùî–ü–æ–º–æ—â—å":
		predlojka_bot.reply_to(message, """
üí≥ *–§—É–Ω–∫—Ü–∏–∏ –±–∞–Ω–∫–∞*:  
\- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ 
\- –ü–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤ \(–∫–æ–º–∏—Å—Å–∏—è 2%\)  
\- –£–∑–Ω–∞–≤–∞–π—Ç–µ –∫—É—Ä—Å –∏–º–ø–µ—Ä—Å–∫–∏—Ö –±–∞—Ç–æ–≤ –∫ —Ä—É–±–ª—è–º

üìà *–û –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç*:  
–ö—É—Ä—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±—â–µ–µ —á–∏—Å–ª–æ –±–∞—Ç–æ–≤\, –¥–µ–ª—ë–Ω–Ω–æ–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤–∞–ª—é—Ç–∞  

üéâ *–ë–æ–Ω—É—Å—ã*:  
–ó–∞ –∫–∞–∂–¥—ã–π –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤–∞–º –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞—Ç—ã\, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä—ë–º–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ—Å—Ç–µ 

üì• –í—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ\!
						 """, parse_mode="MarkdownV2", reply_markup=q)


	else:
		predlojka_bot.reply_to(message, "–ë–æ—é—Å—å, —è —Ç–∞–∫ –Ω–µ —É–º–µ—é...", reply_markup=q)
	


@predlojka_bot.message_handler(commands=['help'])
def help(message):
	predlojka_bot.reply_to(message, text="–ê —á—ë —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å, —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—à—å—Å—è", parse_mode='MarkdownV2')











@predlojka_bot.message_handler(content_types=['sticker', 'video', 'photo', 'text', 'document', 'audio', 'voice'])
def accepter(message):
	if message.chat.id != channel and message.chat.id != channel_red and message.chat.id != -1002228334833:
		markup = types.InlineKeyboardMarkup()
		user_name=f'\n\nüë§ {message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name != None else ""}'
		predlojka_bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, {user_name[4:]}!!!", reply_markup=q)

		markup.add(types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data="+" + user_name))
		markup.add(types.InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data="-"))
		print(f"Predlojka get new message! It is {message.content_type}")

		if message.content_type == 'text':
			predlojka_bot.send_message(admin, message.text + user_name, reply_markup=markup)

		elif message.content_type == 'sticker':
			markup = types.InlineKeyboardMarkup()
			markup.add(types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data="&" + user_name))
			markup.add(types.InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data="-"))
			predlojka_bot.send_sticker(admin, message.sticker.file_id, reply_markup=markup)
	
		elif message.content_type == 'video':
			predlojka_bot.send_video(admin, message.video.file_id, reply_markup=markup, caption = none_type(message.caption) + user_name)
		
		elif message.content_type == 'photo':
			predlojka_bot.send_photo(admin, message.photo[0].file_id, reply_markup=markup, caption = none_type(message.caption) + user_name)
		
		elif message.content_type == 'document':
			predlojka_bot.send_document(admin, message.document.file_id, reply_markup=markup, caption = none_type(message.caption) + user_name)

		elif message.content_type == 'audio':
			predlojka_bot.send_audio(admin, message.audio.file_id, reply_markup=markup, caption = none_type(message.caption) + user_name)

		elif message.content_type == 'voice':
			predlojka_bot.send_voice(admin, message.voice.file_id, reply_markup=markup, caption = none_type(message.caption) + user_name)









@predlojka_bot.callback_query_handler(func=lambda call: (call.data).startswith("+"))
def sender(call):
	predlojka_bot.copy_message(channel, admin, call.message.id)
	predlojka_bot.delete_message(admin, call.message.id)
	print("post was accepted")




@predlojka_bot.callback_query_handler(func=lambda call: (call.data).startswith("&"))
def st_sender(call):
	predlojka_bot.copy_message(channel, admin, call.message.id)
	predlojka_bot.send_message(channel, call.data[1:], disable_notification=True)
	predlojka_bot.delete_message(admin, call.message.id)
	print("sticker was accepted")





@predlojka_bot.callback_query_handler(func=lambda call: (call.data).startswith("-"))
def denier(call):
	predlojka_bot.delete_message(admin, message_id=call.message.id)
	print("post was rejected")


predlojka_bot.infinity_polling()