from data import predlojka_bot, db, admin, channel, channel_red, bot_version
from telebot import types
from tinydb import Query
from bank import edit_currency_info, view_currency_info, send_money, bank_get_balance
from battle import generate_enemy, get_loot, get_player, save_player
import random

q = types.ReplyKeyboardRemove()
active_enemies = {}

def none_type(object):
    return "" if object is None else f'{object}'

@predlojka_bot.message_handler(commands=['start'])
def start(message):
    if db.contains(Query().id == message.from_user.id):
        predlojka_bot.reply_to(message, text="–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –ü—Ä–µ–¥–ª–æ–∂–∫—É! –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç–æ–≤)")
    else:
        db.insert({'id': message.from_user.id, 'name': f'{message.from_user.first_name}', 'last_name': f'{message.from_user.last_name}', 'balance': 0})
        predlojka_bot.reply_to(message, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–º–ø–µ—Ä–∏—é!")

@predlojka_bot.message_handler(commands=['changelog'])
def changelog(message):
    try:
        with open('changelog.txt', mode='r', encoding='utf-8') as f:
            predlojka_bot.send_document(message.chat.id, f, reply_to_message_id=message.message_id, caption=f"–í–æ—Ç –º–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è - <b>{bot_version}</b>", parse_mode='HTML')
    except Exception as e:
        print(e)
        predlojka_bot.reply_to(message, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. (X_X)\n–¢–µ–ø–µ—Ä—å –º–µ–Ω—è —Å–Ω–æ–≤–∞ –∑–∞–∫—Ä–æ—é—Ç –≤ –ø–æ–¥–≤–∞–ª–µ –∏ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å—Ç—è—Ç (‚âß Ôπè ‚â¶)")

@predlojka_bot.message_handler(commands=['edit_currency'])
def editing_currency(message):
    if message.chat.id == admin:
        predlojka_bot.reply_to(message, "–°–∫–∏–Ω—å —Ü–∏—Ñ–µ—Ä–∫–∏, –±–∞—Ç—ã –∏ —Ä—É–±–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        predlojka_bot.register_next_step_handler(message, editing_currency2)
    else:
        predlojka_bot.reply_to(message, "–≠–∫–æ–Ω–æ–º–∏–∫—É –Ω–µ –ª–æ–º–∞–π")

def editing_currency2(message):
    try:
        purumpurum = message.text.split(",")
        a = int(purumpurum[0])
        b = int(purumpurum[1])
        edit_currency_info(message, a, b)
    except:
        predlojka_bot.reply_to(message, "–ù–µ –≤—ã—à–ª–æ")

@predlojka_bot.message_handler(commands=['bank'])
def bank_meetings(message):
    reply_button = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton("üí∞–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
    btn2 = types.KeyboardButton("üîÅ–ü–µ—Ä–µ–≤–æ–¥")
    btn3 = types.KeyboardButton("üìà–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã")
    btn4 = types.KeyboardButton("‚ùî–ü–æ–º–æ—â—å")
    reply_button.add(btn1, btn2, btn3, btn4)
    predlojka_bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–º–ø–µ—Ä—Å–∫–∏–π –±–∞–Ω–∫! –ß—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_button)
    predlojka_bot.register_next_step_handler(message, what_do_you_want_from_bank)

def what_do_you_want_from_bank(message):
    if message.text == "üí∞–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å":
        predlojka_bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bank_get_balance(message)} –ò–º–ø–µ—Ä—Å–∫–∏—Ö –ë–∞—Ç–æ–≤\n–í–∞—à id: `{message.from_user.id}`", reply_markup=q, parse_mode='MarkdownV2')
    elif message.text == "üîÅ–ü–µ—Ä–µ–≤–æ–¥":
        predlojka_bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞!", reply_markup=q)
        predlojka_bot.register_next_step_handler(message, send_money)
    elif message.text == "üìà–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã":
        predlojka_bot.reply_to(message, f"{view_currency_info()}", reply_markup=q)
    elif message.text == "‚ùî–ü–æ–º–æ—â—å":
        predlojka_bot.reply_to(message, r"""
üí≥ *–§—É–Ω–∫—Ü–∏–∏ –±–∞–Ω–∫–∞*:  
\- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ 
\- –ü–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤ \(–∫–æ–º–∏—Å—Å–∏—è 2%\)  
\- –£–∑–Ω–∞–≤–∞–π—Ç–µ –∫—É—Ä—Å –∏–º–ø–µ—Ä—Å–∫–∏—Ö –±–∞—Ç–æ–≤ –∫ —Ä—É–±–ª—è–º

üìà *–û –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç*:  
–ö—É—Ä—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±—â–µ–µ —á–∏—Å–ª–æ –±–∞—Ç–æ–≤\, –¥–µ–ª—ë–Ω–Ω–æ–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤–∞–ª—é—Ç–∞  

üéâ *–ë–æ–Ω—É—Å—ã*:  
–ó–∞ –∫–∞–∂–¥—ã–π –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤–∞–º –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞—Ç—ã\, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä—ë–º–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ—Å—Ç–µ (WIP)

üì• –í—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ\!
        """, parse_mode="MarkdownV2", reply_markup=q)
    else:
        predlojka_bot.reply_to(message, "–ë–æ—é—Å—å, —è —Ç–∞–∫ –Ω–µ —É–º–µ—é...", reply_markup=q)

@predlojka_bot.message_handler(commands=['help'])
def help(message):
    try:
        with open('help_info.txt', mode='r', encoding='utf-8') as f:
            help_string = f.read()
        predlojka_bot.reply_to(message, text=help_string, parse_mode='HTML')
    except Exception as e:
        print(e)
        predlojka_bot.reply_to(message, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É. (X_X)\n–¢–µ–ø–µ—Ä—å –º–µ–Ω—è —Å–Ω–æ–≤–∞ –∑–∞–∫—Ä–æ—é—Ç –≤ –ø–æ–¥–≤–∞–ª–µ –∏ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å—Ç—è—Ç (‚âß Ôπè ‚â¶)")

@predlojka_bot.message_handler(commands=['battle'])
def battle_command(message):
    global active_enemies
    active_enemies = {}
    user_id = message.from_user.id
    player = get_player(user_id)
    enemy = generate_enemy(player.level)
    active_enemies[user_id] = enemy
    markup = types.InlineKeyboardMarkup()
    attack_btn = types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")
    markup.add(attack_btn)
    predlojka_bot.send_message(message.chat.id, f"‚öîÔ∏è –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {enemy.name}, HP: {enemy.hp}", reply_markup=markup)

@predlojka_bot.callback_query_handler(func=lambda call: print(call.data) or call.data and call.data.startswith("a"))
def handle_attack(call):
    try:
        print("entering callback handler")
        user_id = call.from_user.id
        player = get_player(user_id)
        enemy = active_enemies.get(user_id)
        if not enemy:
            predlojka_bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã.")
            return
        damage = random.randint(5, 10)
        enemy.hp -= damage
        result = f"–í—ã —É–¥–∞—Ä–∏–ª–∏ {enemy.name} –Ω–∞ {damage} —É—Ä–æ–Ω–∞. –£ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å {max(enemy.hp, 0)} HP.\n"
        if enemy.hp <= 0:
            result += f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy.name}! üèÜ\n"
            loot = get_loot(1)
            result += f"–í—ã –Ω–∞—à–ª–∏: {loot}"
            player.level += 1
            player.hp = 100
            save_player(player)
            active_enemies.pop(user_id, None)
            predlojka_bot.send_message(chat_id=call.message.chat.id, text=result)
            return
        edmg = random.randint(3, 8)
        player.hp -= edmg
        result += f"{enemy.name} —É–¥–∞—Ä–∏–ª –≤–∞—Å –Ω–∞ {edmg}. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {max(player.hp, 0)} HP."
        if player.hp <= 0:
            result += "\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏... üíÄ"
            player.hp = 100
            active_enemies.pop(user_id, None)
            save_player(player)
            predlojka_bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result)
            return
        markup = types.InlineKeyboardMarkup()
        attack_btn = types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")
        markup.add(attack_btn)
        save_player(player)
        predlojka_bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result, reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_attack: {e}")

@predlojka_bot.message_handler(commands=['stats'])
def show_stats(message):
    user_id = message.from_user.id
    player = get_player(user_id)
    predlojka_bot.send_message(message.chat.id, f"–í–∞—à –∫–ª–∞—Å—Å: {player.cls}\n–†–∞—Å–∞: {player.race}\nHP: {player.hp}\n–£—Ä–æ–≤–µ–Ω—å: {player.level}")

@predlojka_bot.message_handler(content_types=['sticker', 'video', 'photo', 'text', 'document', 'audio', 'voice'])
def accepter(message):
    if message.chat.id != channel and message.chat.id != channel_red and message.chat.id != -1002228334833:
        markup = types.InlineKeyboardMarkup()
        adafa_think_text_content = message.text if message.content_type == 'text' else message.caption or ""
        if '#–∞–Ω–æ–Ω' in adafa_think_text_content.lower():
            user_name = '\n\nü§´ –ê–Ω–æ–Ω–∏–º'
        else:
            user_name = f'\n\nüë§ {message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name != None else ""}'
        if '#–≤–æ–ø—Ä–æ—Å' in adafa_think_text_content:
            predlojka_bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, {user_name[4:]}!!!", reply_markup=q)
            markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="+" + user_name + 'question'+'|'))
            markup.add(types.InlineKeyboardButton("–ò–≥–Ω–æ—Ä", callback_data="-"))
            print(f"Predlojka get new message! It is {message.content_type}")
            if message.content_type == 'text':
                predlojka_bot.send_message(admin, f'–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_name[4:]}\n\n<blockquote>{message.text}</blockquote>', reply_markup=markup, parse_mode='HTML')
            elif message.content_type == 'sticker':
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="&" + user_name + 'question'+'|'))
                markup.add(types.InlineKeyboardButton("–ò–≥–Ω–æ—Ä", callback_data="-"))
                predlojka_bot.send_sticker(admin, message.sticker.file_id, reply_markup=markup)
            elif message.content_type == 'video':
                predlojka_bot.send_video(admin, message.video.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'photo':
                predlojka_bot.send_photo(admin, message.photo[0].file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'document':
                predlojka_bot.send_document(admin, message.document.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'audio':
                predlojka_bot.send_audio(admin, message.audio.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'voice':
                predlojka_bot.send_voice(admin, message.voice.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
        else:
            predlojka_bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, {user_name[4:]}!!!", reply_markup=q)
            markup.add(types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data="+" + user_name))
            markup.add(types.InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data="-"))
            print(f"Predlojka get new message! It is {message.content_type}")
            if message.content_type == 'text':
                predlojka_bot.send_message(admin, message.text + user_name, reply_markup=markup)
            elif message.content_type == 'sticker':
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data="&" + user_name))
                markup.add(types.InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data="-"))
                predlojka_bot.send_sticker(admin, message.sticker.file_id, reply_markup=markup)
            elif message.content_type == 'video':
                predlojka_bot.send_video(admin, message.video.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'photo':
                predlojka_bot.send_photo(admin, message.photo[0].file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'document':
                predlojka_bot.send_document(admin, message.document.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'audio':
                predlojka_bot.send_audio(admin, message.audio.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)
            elif message.content_type == 'voice':
                predlojka_bot.send_voice(admin, message.voice.file_id, reply_markup=markup, caption=none_type(message.caption) + user_name)

@predlojka_bot.callback_query_handler(func=lambda call: (call.data).startswith("+"))
def sender(call):
    predlojka_bot.copy_message(channel, admin, call.message.id)
    predlojka_bot.delete_message(admin, call.message.id)
    print("post was accepted")

@predlojka_bot.callback_query_handler(func=lambda call: (call.data).startswith("&"))
def st_sender(call):
    if 'question' not in call.data:
        predlojka_bot.copy_message(channel, admin, call.message.id)
        predlojka_bot.send_message(channel, call.data[1:], disable_notification=True)
        predlojka_bot.delete_message(admin, call.message.id)
        print("sticker was accepted")
    else:
        predlojka_bot.copy_message(channel, admin, call.message.id)
        predlojka_bot.send_message(channel, call.data[1:], disable_notification=True)
        predlojka_bot.delete_message(admin, call.message.id)
        print("sticker-question was accepted")

@predlojka_bot.callback_query_handler(func=lambda call: (call.data).startswith("-"))
def denier(call):
    predlojka_bot.delete_message(admin, message_id=call.message.id)
    print("post was rejected")